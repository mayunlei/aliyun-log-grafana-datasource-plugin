{"version":3,"sources":["../src/datasource.js"],"names":["handleTsdbResponse","response","res","_","forEach","data","results","r","series","push","target","s","name","datapoints","points","tables","t","type","refId","console","log","mapToTextValue","result","map","d","i","text","value","isObject","GenericDatasource","instanceSettings","backendSrv","templateSrv","url","id","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","hide","Promise","resolve","doTsdbRequest","then","to","Date","getTime","from","str","JSON","parse","status","message","title","catch","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","doRequest","method","q","timeRange","unix","rows","item","datasourceRequest","tsdbRequestData","queries","valueOf","toString","queryType","scopedVars","datasourceId","replaceQueryParameters","xcol","ycol","variable","multi","includeAll","a","v","label","join","isArray","re","reArray","match","col","old","sec","indexOf","parseInt","String","_d"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nexport class GenericDatasource {\n    /** @ngInject */\n    constructor(instanceSettings, backendSrv, templateSrv) {\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.id = instanceSettings.id;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = { 'Content-Type': 'application/json' };\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n    }\n    query(options) {\n        const query = this.buildQueryParameters(options);\n        query.targets = query.targets.filter(t => !t.hide);\n        if (query.targets.length <= 0) {\n            return Promise.resolve({ data: [] });\n        }\n        return this.doTsdbRequest(query).then(handleTsdbResponse);\n    }\n    testDatasource() {\n        const to = new Date().getTime();\n        const from = to - 5000;\n        const str = '{\"requestId\":\"Q100\",\"timezone\":\"\",\"range\":{\"from\":\"' + from + '\",\"to\":\"' + to + '\"},' +\n            '\"targets\":[{\"queryType\":\"query\",\"target\":\"count\",\"refId\":\"A\",\"type\":\"timeserie\",\"datasourceId\":' + this.id + ',' +\n            '\"query\":\"* | select count(*) as count\",\"ycol\":\"count\"}]}';\n        const query = JSON.parse(str);\n        return this.doTsdbRequest(query).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n            }\n            else {\n                return { status: \"failed\", message: \"Data source is not working\", title: \"Error\" };\n            }\n        }).catch(() => {\n            return { status: \"failed\", message: \"Data source is not working\", title: \"Error\" };\n        });\n    }\n    annotationQuery(options) {\n        const query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n        const annotationQuery = {\n            range: options.range,\n            annotation: {\n                name: options.annotation.name,\n                datasource: options.annotation.datasource,\n                enable: options.annotation.enable,\n                iconColor: options.annotation.iconColor,\n                query: query\n            },\n            rangeRaw: options.rangeRaw\n        };\n        return this.doRequest({\n            url: this.url + '/annotations',\n            method: 'POST',\n            data: annotationQuery\n        }).then(result => {\n            return result.data;\n        });\n    }\n    metricFindQuery(q) {\n        q = this.templateSrv.replace(q, {}, 'glob');\n        const to = this.templateSrv.timeRange.to.unix() * 1000;\n        const from = this.templateSrv.timeRange.from.unix() * 1000;\n        const str = '{\"requestId\":\"Q100\",\"timezone\":\"\",\"range\":{\"from\":\"' + from + '\",\"to\":\"' + to + '\"},' +\n            '\"targets\":[{\"queryType\":\"query\",\"target\":\"query\",\"refId\":\"A\",\"type\":\"timeserie\",\"datasourceId\":' + this.id + ',' +\n            '\"query\":\"' + q + '\"}]}';\n        const query = JSON.parse(str);\n        return this.doTsdbRequest(query).then(response => {\n            const res = handleTsdbResponse(response);\n            if (res && res.data && res.data.length) {\n                let rows = res.data[0].rows;\n                rows = rows.map(item => item[0]);\n                return rows;\n            }\n            else {\n                return [];\n            }\n        }).then(mapToTextValue);\n    }\n    doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n        return this.backendSrv.datasourceRequest(options);\n    }\n    doTsdbRequest(options) {\n        const tsdbRequestData = {\n            queries: options.targets,\n        };\n        if (options.range) {\n            tsdbRequestData.from = options.range.from.valueOf().toString();\n            tsdbRequestData.to = options.range.to.valueOf().toString();\n        }\n        return this.backendSrv.datasourceRequest({\n            url: '/api/tsdb/query',\n            method: 'POST',\n            data: tsdbRequestData\n        });\n    }\n    buildQueryParameters(options) {\n        //remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.target !== 'select metric';\n        });\n        options.targets = _.map(options.targets, target => {\n            return {\n                queryType: 'query',\n                target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n                refId: target.refId,\n                hide: target.hide,\n                type: target.type || 'timeserie',\n                datasourceId: this.id,\n                query: this.replaceQueryParameters(target, options),\n                xcol: target.xcol,\n                ycol: target.ycol\n            };\n        });\n        return options;\n    }\n    replaceQueryParameters(target, options) {\n        let query = this.templateSrv.replace(target.query, options.scopedVars, function (value, variable) {\n            if (typeof value == \"object\" && (variable.multi || variable.includeAll)) {\n                const a = [];\n                value.forEach(function (v) {\n                    if (variable.name == variable.label)\n                        a.push('\"' + variable.name + '\":\"' + v + '\"');\n                    else\n                        a.push('\"' + v + '\"');\n                });\n                return a.join(\" OR \");\n            }\n            if (_.isArray(value)) {\n                return value.join(' OR ');\n            }\n            return value;\n        });\n        const re = /\\$([0-9]+)([dmhs])/g;\n        const reArray = query.match(re);\n        _(reArray).forEach(function (col) {\n            const old = col;\n            col = col.replace(\"$\", '');\n            let sec = 1;\n            if (col.indexOf(\"s\") != -1)\n                sec = 1;\n            else if (col.indexOf(\"m\") != -1)\n                sec = 60;\n            else if (col.indexOf(\"h\") != -1)\n                sec = 3600;\n            else if (col.indexOf(\"d\") != -1)\n                sec = 3600 * 24;\n            col = col.replace(/[smhd]/g, '');\n            let v = parseInt(col);\n            v = v * sec;\n            console.log(old, v, col, sec, query);\n            query = query.replace(old, v);\n        });\n        if (query.indexOf(\"#time_end\") != -1) {\n            query = query.replace(\"#time_end\", parseInt(String(options.range.to._d.getTime() / 1000)));\n        }\n        if (query.indexOf(\"#time_begin\") != -1) {\n            query = query.replace(\"#time_begin\", parseInt(String(options.range.from._d.getTime() / 1000)));\n        }\n        return query;\n    }\n    getTagKeys(options) {\n        return new Promise((resolve) => {\n            this.doRequest({\n                url: this.url + '/tag-keys',\n                method: 'POST',\n                data: options\n            }).then(result => {\n                return resolve(result.data);\n            });\n        });\n    }\n    getTagValues(options) {\n        return new Promise((resolve) => {\n            this.doRequest({\n                url: this.url + '/tag-values',\n                method: 'POST',\n                data: options\n            }).then(result => {\n                return resolve(result.data);\n            });\n        });\n    }\n}\nexport function handleTsdbResponse(response) {\n    const res = [];\n    _.forEach(response.data.results, r => {\n        _.forEach(r.series, s => {\n            res.push({ target: s.name, datapoints: s.points });\n        });\n        _.forEach(r.tables, t => {\n            t.type = 'table';\n            t.refId = r.refId;\n            res.push(t);\n        });\n    });\n    response.data = res;\n    console.log(res);\n    return response;\n}\nexport function mapToTextValue(result) {\n    return _.map(result, (d, i) => {\n        if (d && d.text && d.value) {\n            return { text: d.text, value: d.value };\n        }\n        else if (_.isObject(d)) {\n            return { text: d, value: i };\n        }\n        return { text: d, value: d };\n    });\n}\n//# sourceMappingURL=datasource.js.map"]}